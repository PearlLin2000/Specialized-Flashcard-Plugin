<script lang="ts">

    import { showMessage, confirm } from "siyuan";
    import SettingPanel from "./libs/components/setting-panel.svelte";

    // 声明插件实例
    export let plugin: any;

    let groups: string[] = ["🔍 SQL 查询组", "🌈 基础设置", "✨ 其他设置"];
    let focusGroup = groups[0];

    // SQL 组配置数据结构
    let sqlGroups = [
        {
            id: 1,
            enabled: true,
            name: "逸码标签查询",
            sql: "SELECT * FROM blocks WHERE tag LIKE '%#逸码#%'"
        },
        {
            id: 2,
            enabled: false,
            name: "文档块查询",
            sql: "SELECT * FROM blocks WHERE type = 'd' LIMIT 20"
        },
        {
            id: 3,
            enabled: true,
            name: "最近修改的块",
            sql: "SELECT * FROM blocks ORDER BY updated DESC LIMIT 15"
        }
    ];

    // 基础设置组
    const basicSettings: ISettingItem[] = [
        {
            type: 'checkbox',
            title: 'checkbox',
            description: 'checkbox',
            key: 'a',
            value: true
        },
        {
            type: 'textinput',
            title: 'text',
            description: 'This is a text',
            key: 'b',
            value: 'This is a text',
            placeholder: 'placeholder'
        },
        {
            type: 'textarea',
            title: 'textarea',
            description: 'This is a textarea',
            key: 'b2',
            value: 'This is a textarea',
            placeholder: 'placeholder',
            direction: 'row'
        },
        {
            type: 'select',
            title: 'select',
            description: 'select',
            key: 'c',
            value: 'x',
            options: {
                x: 'x',
                y: 'y',
                z: 'z'
            }
        }
    ];

    // 其他设置组
    const otherSettings: ISettingItem[] = [
        {
            type: 'button',
            title: 'button',
            description: 'This is a button',
            key: 'e',
            value: 'Click Button',
            button: {
                label: 'Click Me',
                callback: () => {
                    showMessage('Hello, world!');
                }
            }
        },
        {
            type: 'slider',
            title: 'slider',
            description: 'slider',
            key: 'd',
            value: 50,
            slider: {
                min: 0,
                max: 100,
                step: 1
            }
        }
    ];

    // 添加新的 SQL 组
    function addSQLGroup() {
        const newId = Math.max(0, ...sqlGroups.map(g => g.id)) + 1;
        sqlGroups = [...sqlGroups, {
            id: newId,
            enabled: false,
            name: `新查询组 ${newId}`,
            sql: "SELECT * FROM blocks LIMIT 10"
        }];
    }

    // 删除 SQL 组
    function removeSQLGroup(groupId: number) {
        const group = sqlGroups.find(g => g.id === groupId);
        confirm(
            "确认删除",
            `确定要删除查询组 "${group?.name}" 吗？此操作不可恢复。`,
            () => {
                sqlGroups = sqlGroups.filter(g => g.id !== groupId);
                showMessage(`已删除查询组: ${group?.name}`);
            }
        );
    }

    // 全局保存配置
    async function saveAllSettings() {
        try {
            // 使用插件的 saveData 方法保存 SQL 组配置
            await this.plugin.saveData('sqlGroups', sqlGroups);
            showMessage('所有配置已保存');
        } catch (error) {
            console.error('保存配置失败:', error);
            showMessage('保存配置失败，请查看控制台');
        }
    }

    /********** 基础设置和其他设置的事件处理 **********/
    interface ChangeEvent {
        group: string;
        key: string;
        value: any;
    }

    const onChanged = ({ detail }: CustomEvent<ChangeEvent>) => {
        console.log("设置变更:", detail);
        
        if (detail.group === groups[1]) {
            // 基础设置的变更处理 - 使用原有的自动保存机制
            console.log("基础设置变更:", detail.key, detail.value);
        } else if (detail.group === groups[2]) {
            // 其他设置的变更处理 - 使用原有的自动保存机制
            console.log("其他设置变更:", detail.key, detail.value);
        }
        // 不显示消息，使用原有的保存机制
        //plugin.save();
    };
</script>

<div class="fn__flex-1 fn__flex config__panel">
    <ul class="b3-tab-bar b3-list b3-list--background">
        {#each groups as group}
            <li
                class:b3-list-item--focus={group === focusGroup}
                class="b3-list-item"
                on:click={() => { focusGroup = group; }}
            >
                <span class="b3-list-item__text">{group}</span>
            </li>
        {/each}
    </ul>
    
    <div class="config__tab-wrap">
        <!-- SQL 查询组面板 -->
        {#if focusGroup === groups[0]}
        <div class="sql-groups-panel">
            <div class="b3-label config__panel-title">
                SQL 查询组配置
                <div class="config__panel-desc">
                    配置多个 SQL 查询组，启用后将在闪卡功能中使用对应的查询语句
                </div>
            </div>

            <!-- SQL 组列表（带滚动条） -->
            <div class="sql-groups-list-container">
                <div class="sql-groups-list">
                    {#each sqlGroups as group (group.id)}
                    <div class="sql-group-item">
                        <div class="sql-group-header">
                            <!-- 启用开关 -->
                            <label class="b3-label config__item compact-item">
                                <input 
                                    type="checkbox" 
                                    bind:checked={group.enabled}
                                    class="b3-switch fn__flex-center"
                                />
                                <span class="config__item-name">启用</span>
                            </label>

                            <!-- 组名输入 -->
                            <div class="config__item compact-item">
                                <input 
                                    type="text" 
                                    bind:value={group.name}
                                    class="b3-text-field fn__flex-1 compact-input" 
                                    placeholder="组别名称"
                                />
                            </div>

                            <!-- 删除按钮 -->
                            <button 
                                class="b3-button b3-button--error compact-button"
                                on:click={() => removeSQLGroup(group.id)}
                                title="删除此查询组"
                            >
                                −
                            </button>
                        </div>

                        <!-- SQL 输入框 -->
                        <div class="config__item compact-item">
                            <textarea 
                                bind:value={group.sql}
                                class="b3-text-field fn__flex-1 sql-textarea" 
                                placeholder="输入 SQL 查询语句..."
                                rows="3"
                            />
                        </div>
                    </div>
                    {/each}
                </div>
            </div>

            <!-- 操作按钮区域 -->
            <div class="sql-groups-actions">
                <button 
                    class="b3-button b3-button--outline"
                    on:click={addSQLGroup}
                >
                    + 添加查询组
                </button>
                <div class="fn__space"></div>
                <button 
                    class="b3-button b3-button--text"
                    on:click={saveAllSettings}
                >
                    保存配置
                </button>
            </div>
        </div>
        {/if}

        <!-- 基础设置面板 -->
        <SettingPanel
            group={groups[1]}
            settingItems={basicSettings}
            display={focusGroup === groups[1]}
            on:changed={onChanged}
        >
            <div class="fn__flex b3-label">
                💡 这是基础设置面板的说明区域。
            </div>
        </SettingPanel>

        <!-- 其他设置面板 -->
        <SettingPanel
            group={groups[2]}
            settingItems={otherSettings}
            display={focusGroup === groups[2]}
            on:changed={onChanged}
        >
            <div class="fn__flex b3-label">
                💡 这是其他设置面板的说明区域。
            </div>
        </SettingPanel>
    </div>
</div>

<style lang="scss">
    .config__panel {
        height: 100%;
    }
    .config__panel > ul > li {
        padding-left: 1rem;
    }

    .config__panel-title {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 15px;
        padding: 0 5px;
    }

    .config__panel-desc {
        font-size: 12px;
        color: var(--b3-theme-on-surface-light);
        margin-top: 5px;
        font-weight: normal;
    }

    .sql-groups-panel {
        padding: 15px;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .sql-groups-list-container {
        flex: 1;
        overflow-y: auto;
        max-height: calc(100vh - 200px);
        margin-bottom: 15px;
        border: 1px solid var(--b3-theme-surface-lighter);
        border-radius: 4px;
        padding: 10px;
    }

    .sql-groups-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .sql-group-item {
        border: 1px solid var(--b3-theme-surface-lighter);
        border-radius: 4px;
        padding: 10px;
        background: var(--b3-theme-surface);
    }

    .sql-group-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
    }

    .compact-item {
        margin-bottom: 0 !important;
        flex: 1;
    }

    .compact-item .config__item-name {
        font-size: 12px;
        margin-bottom: 2px;
    }

    .compact-input {
        height: 28px;
        font-size: 12px;
        padding: 4px 8px;
    }

    .compact-button {
        width: 28px !important;
        height: 28px !important;
        padding: 0 !important;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        flex-shrink: 0;
    }

    .sql-textarea {
        font-family: monospace;
        resize: vertical;
        min-height: 60px;
        padding: 6px 8px;
    }

    .sql-groups-actions {
        display: flex;
        justify-content: space-between;
        padding: 5px 0;
        flex-shrink: 0;
    }

    .config__item {
        display: flex;
        flex-direction: column;
        margin-bottom: 12px;
    }

    .config__item .config__item-name {
        font-weight: 600;
        margin-bottom: 2px;
        color: var(--b3-theme-on-background);
        font-size: 12px;
    }

    /* 紧凑布局的开关样式 */
    .b3-switch {
        transform: scale(0.9);
    }

    /* 滚动条样式 */
    .sql-groups-list-container::-webkit-scrollbar {
        width: 6px;
    }

    .sql-groups-list-container::-webkit-scrollbar-track {
        background: var(--b3-theme-surface);
        border-radius: 3px;
    }

    .sql-groups-list-container::-webkit-scrollbar-thumb {
        background: var(--b3-theme-on-surface-light);
        border-radius: 3px;
    }

    .sql-groups-list-container::-webkit-scrollbar-thumb:hover {
        background: var(--b3-theme-on-surface);
    }

    /* 响应式调整 */
    @media (max-width: 768px) {
        .sql-group-header {
            flex-wrap: wrap;
        }
        
        .compact-item {
            min-width: auto;
        }
        
        .sql-groups-actions {
            flex-direction: column;
            gap: 8px;
        }
    }
</style>