//定时扫描并静默推迟当日创建的闪卡2天
// ===== 可配置参数 =====
const POSTPONE_DAYS = "2"; // 可轻松修改推迟天数
const SCAN_INTERVAL = 15; // 扫描间隔（分钟）

// ===== 日期处理工具函数 =====
const getTodayString = () => {
  const today = new Date();
  return [
    today.getFullYear(),
    String(today.getMonth() + 1).padStart(2, '0'),
    String(today.getDate()).padStart(2, '0')
  ].join('');
};

// ===== 卡片状态检测策略 =====
const cardStatusStrategies = {
  isTodayCard: (card, todayString) => 
    card.riffCardID?.startsWith(todayString),
  
  isNotSuspended: (card) => 
    !(card.ial?.bookmark === "🛑 Suspended Cards" || 
      card.ial?.["custom-card-priority-stop"] !== undefined)
};

// ===== 筛选函数 =====
function filterTodayCards(cards) {
  const todayString = getTodayString();
  return cards.filter(card => 
    cardStatusStrategies.isTodayCard(card, todayString) && 
    cardStatusStrategies.isNotSuspended(card)
  );
}

// ===== 执行推迟操作的函数 =====
const postponeTodayCardsDirectly = async () => {
  try {
    console.log(`开始执行推迟操作，推迟天数: ${POSTPONE_DAYS}`);
    
    // 获取所有卡片
    const allCards = await tomato_zZmqus5PtYRi.siyuan.getRiffCardsAllFlat();
    // 筛选今日卡片
    const todayCards = filterTodayCards(allCards);
    
    console.log(`找到 ${todayCards.length} 张今日卡片`);
    
    if (todayCards.length > 0) {
      // 调用推迟函数，使用配置的参数
      await tomato_zZmqus5PtYRi.cardPriorityBox.stopCards(todayCards, false, POSTPONE_DAYS);
      console.log(`成功推迟 ${todayCards.length} 张今日卡片 ${POSTPONE_DAYS} 天`);
    } else {
      console.log("没有找到今日创建的卡片");
    }
  } catch (error) {
    console.error("推迟操作失败:", error);
  }
};

// ===== 定时扫描功能 =====
let scanIntervalId = null;

// 启动定时扫描
const startScheduledScanning = () => {
  // 清除现有的定时器（如果有）
  if (scanIntervalId) {
    clearInterval(scanIntervalId);
  }
  
  // 立即执行一次
  postponeTodayCardsDirectly();
  
  // 设置定时器，每隔指定分钟执行一次
  const intervalMs = SCAN_INTERVAL * 60 * 1000; // 转换为毫秒
  scanIntervalId = setInterval(postponeTodayCardsDirectly, intervalMs);
  
  console.log(`已启动定时扫描，每隔 ${SCAN_INTERVAL} 分钟执行一次`);
};

// 停止定时扫描
const stopScheduledScanning = () => {
  if (scanIntervalId) {
    clearInterval(scanIntervalId);
    scanIntervalId = null;
    console.log("已停止定时扫描");
  }
};

// 立即启动定时扫描
startScheduledScanning();

// 导出函数，以便在需要时可以手动停止扫描
// 例如：window.stopAutoPostpone = stopScheduledScanning;